buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
}


group 'example.bidrectional.grpc'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: "com.google.osdetector"
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {

    compile 'io.github.lognet:grpc-spring-boot-starter:4.2.2'

    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.5.0.RELEASE'


    compile group: 'commons-io', name: 'commons-io', version: '2.5'

    compile group: 'org.eclipse.jetty.http2', name: 'http2-client', version: '9.4.7.v20170914'
    compile group: 'org.eclipse.jetty.http2', name: 'http2-http-client-transport', version: '9.4.7.v20170914'
    compile group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version: '8.1.11.v20170118'



    compile 'org.projectlombok:lombok:1.18.16'

    testCompileOnly 'org.projectlombok:lombok:1.18.16'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def tcnative_classifier = osdetector.classifier
// Fedora variants use a different soname for OpenSSL than other linux distributions
// (see http://netty.io/wiki/forked-tomcat-native.html).
if (osdetector.os == "linux" && osdetector.release.isLike("fedora")) {
    tcnative_classifier += "-fedora"
}

sourceSets {
    main {
        proto {
            srcDirs 'src/main/proto'
        }
        java {
            // include self written and generated code
            srcDirs "$projectDir/src/gen/main/java", "$projectDir/src/gen/main/grpc"
        }
    }
    // remove the test configuration - at least in your example you don't have a special test proto file
}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/gen"
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                // To generate deprecated interfaces and static bindService method,
                // turn the enable_deprecated option to true below:
                option 'enable_deprecated=false'
            }
        }
    }
}

task runServer(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "GrpcExampleServer"
}

task runHeartbeat(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "HeartbeatCheckHttp2"
}
